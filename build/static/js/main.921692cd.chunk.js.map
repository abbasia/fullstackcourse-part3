{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","personObject","post","id","put","delete","Filter","searchString","onChange","value","PersonForm","addPerson","newName","newNumber","onNameChange","onNumberChange","onSubmit","type","Persons","persons","onClick","map","person","key","Person","name","number","Notification","notification","message","className","error","App","useState","setPersons","filtered","setFiltered","setNewName","setNewNumber","setSearchString","setNotification","useEffect","personService","items","console","log","objects","length","filter","toLowerCase","includes","event","target","preventDefault","window","confirm","find","p","updated","setTimeout","catch","concat","status","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.921692cd.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\nconst create = personObject => {\n  const request = axios.post(baseUrl, personObject);\n  return request.then(response => response.data);\n};\n\nconst update = (id, personObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, personObject);\n  return request.then(response => response.data);\n};\nconst remove = id => {\n  return axios.delete(`${baseUrl}/${id}`);\n};\n\nexport default { getAll, create, update, remove };\n","import React, { useState, useEffect } from \"react\";\nimport personService from \"./services/persons\";\nimport \"./App.css\";\nconst Filter = ({ searchString, onChange }) => {\n  return (\n    <div>\n      filter shown with <input value={searchString} onChange={onChange} />\n    </div>\n  );\n};\nconst PersonForm = ({\n  addPerson,\n  newName,\n  newNumber,\n  onNameChange,\n  onNumberChange\n}) => {\n  return (\n    <form onSubmit={addPerson}>\n      <div>\n        name: <input value={newName} onChange={onNameChange} />\n      </div>\n      <div>\n        number: <input value={newNumber} onChange={onNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [filtered, setFiltered] = useState([]);\n\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [searchString, setSearchString] = useState(\"\");\n  const [notification, setNotification] = useState(null);\n\n  useEffect(() => {\n    personService.getAll().then(items => {\n      setPersons(items);\n    });\n  }, []);\n\n  useEffect(() => {\n    console.log(\"filtering...\");\n    const objects =\n      searchString.length === 0\n        ? persons\n        : persons.filter(person =>\n            person.name.toLowerCase().includes(searchString)\n          );\n    setFiltered(objects);\n  }, [searchString, persons]);\n\n  const addPerson = event => {\n    event.preventDefault();\n\n    const personObject = {\n      name: newName,\n      number: newNumber\n    };\n\n    const names = persons.map(person => person.name);\n\n    if (names.includes(newName)) {\n      if (\n        window.confirm(\n          `${newName} is already added to the phonebook, replace the old number with a new one?`\n        )\n      ) {\n        const person = persons.find(p => p.name === newName);\n        personService\n          .update(person.id, personObject)\n          .then(updated => {\n            setPersons(persons.map(p => (p.id === person.id ? updated : p)));\n            setNotification({\n              message: ` Updated ${updated.name}`,\n              error: false\n            });\n            setTimeout(() => {\n              setNotification(null);\n            }, 5000);\n          })\n          .catch(error => {\n            setNotification({\n              message: ` information of ${personObject.name} has already been removed from server`,\n              error: true\n            });\n            setTimeout(() => {\n              setNotification(null);\n            }, 5000);\n          });\n      }\n    } else {\n      personService\n        .create(personObject)\n        .then(data => {\n          setPersons(persons.concat(data));\n          setNewName(\"\");\n          setNewNumber(\"\");\n          setNotification({\n            message: ` Added ${personObject.name}`,\n            error: false\n          });\n          setTimeout(() => {\n            setNotification(null);\n          }, 5000);\n        })\n        .catch(error => {\n          console.log(\"error\", error);\n        });\n    }\n  };\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  };\n  const handleSearchChange = event => {\n    setSearchString(event.target.value);\n  };\n\n  const handleDelete = person => {\n    if (window.confirm(`Delete ${person.name}`)) {\n      personService.remove(person.id).then(response => {\n        if (response.status === 204) {\n          const filtered = persons.filter(p => p.id !== person.id);\n          setPersons(filtered);\n        }\n      });\n    }\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification}></Notification>\n      <Filter searchString={searchString} onChange={handleSearchChange} />\n      <h2>add a new</h2>\n      <PersonForm\n        addPerson={addPerson}\n        newName={newName}\n        onNameChange={handleNameChange}\n        newNumber={newNumber}\n        onNumberChange={handleNumberChange}\n      />\n\n      <h2>Numbers</h2>\n      <Persons persons={filtered} onClick={handleDelete} />\n    </div>\n  );\n};\n\nconst Persons = ({ persons, onClick }) => {\n  return persons.map(person => (\n    <Person key={person.id} person={person} onClick={onClick} />\n  ));\n};\nconst Person = ({ person, onClick }) => {\n  const { name, number } = person;\n  return (\n    <div key={person.id}>\n      {name} {number} <button onClick={() => onClick(person)}>delete</button>\n    </div>\n  );\n};\n\nconst Notification = ({ notification }) => {\n  if (notification === null) return null;\n  const { message, error } = notification;\n  const className = error ? \"error\" : \"success\";\n  return <div className={className}>{message}</div>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}